name: Rush Royale Bot CI/CD

on:
  push:
    branches: [ main, testing ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.13]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install --no-deps scrcpy-client
        pip install av>=15.0.0

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        pytest tests/ -v --cov=Src --cov-report=xml

    - name: Run dependency test
      run: |
        python test_dependencies.py

    - name: Run health check
      run: |
        python tools/health_check.py || exit 0  # Allow health check to fail (no device in CI)

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  code-quality:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: 3.13

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy pylint

    - name: Format with black
      run: |
        black --check --diff .

    - name: Sort imports with isort
      run: |
        isort --check-only --diff .

    - name: Type check with mypy
      run: |
        mypy Src/ --ignore-missing-imports || exit 0  # Allow mypy to fail for now

    - name: Lint with pylint
      run: |
        pylint Src/ --exit-zero  # Don't fail on pylint warnings

  security:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: 3.13

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security check with bandit
      run: |
        bandit -r Src/ -f json -o bandit-report.json || exit 0

    - name: Security check with safety
      run: |
        safety check --json --output safety-report.json || exit 0

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    needs: [test, code-quality]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: 3.13

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Create release package
      run: |
        python -m build
        # Create portable zip package
        7z a -tzip rush-royale-bot-portable.zip Src/ all_units/ icons/ *.bat *.py *.ini *.pkl *.txt *.md LICENSE

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bot-package
        path: |
          dist/
          rush-royale-bot-portable.zip

  release:
    needs: [build]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: bot-package

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Release Notes
          
          ### Features
          - Full automation for Rush Royale dungeon farming
          - Advanced unit recognition with ML rank detection
          - Real-time GUI with performance monitoring
          - Comprehensive error recovery system
          
          ### Installation
          1. Download `rush-royale-bot-portable.zip`
          2. Extract to desired location
          3. Run `install.bat`
          4. Launch with `launch_gui.bat`
          
          ### System Requirements
          - Windows 10/11
          - Python 3.13
          - Bluestacks 5 (1600x900 resolution)
          - 4GB RAM, 2GB free disk space

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./rush-royale-bot-portable.zip
        asset_name: rush-royale-bot-portable.zip
        asset_content_type: application/zip
